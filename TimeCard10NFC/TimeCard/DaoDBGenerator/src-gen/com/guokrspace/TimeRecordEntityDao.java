package com.guokrspace;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.guokrspace.TimeRecordEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TIME_RECORD_ENTITY.
*/
public class TimeRecordEntityDao extends AbstractDao<TimeRecordEntity, Long> {

    public static final String TABLENAME = "TIME_RECORD_ENTITY";

    /**
     * Properties of entity TimeRecordEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cardid = new Property(1, String.class, "cardid", false, "CARDID");
        public final static Property Machine = new Property(2, String.class, "machine", false, "MACHINE");
        public final static Property Temperature = new Property(3, Float.class, "temperature", false, "TEMPERATURE");
        public final static Property Healthstate = new Property(4, String.class, "healthstate", false, "HEALTHSTATE");
        public final static Property Createtime = new Property(5, Long.class, "createtime", false, "CREATETIME");
        public final static Property Fbody = new Property(6, String.class, "fbody", false, "FBODY");
        public final static Property Fext = new Property(7, String.class, "fext", false, "FEXT");
    };


    public TimeRecordEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TimeRecordEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TIME_RECORD_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CARDID' TEXT," + // 1: cardid
                "'MACHINE' TEXT," + // 2: machine
                "'TEMPERATURE' REAL," + // 3: temperature
                "'HEALTHSTATE' TEXT," + // 4: healthstate
                "'CREATETIME' INTEGER," + // 5: createtime
                "'FBODY' TEXT," + // 6: fbody
                "'FEXT' TEXT);"); // 7: fext
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TIME_RECORD_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TimeRecordEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cardid = entity.getCardid();
        if (cardid != null) {
            stmt.bindString(2, cardid);
        }
 
        String machine = entity.getMachine();
        if (machine != null) {
            stmt.bindString(3, machine);
        }
 
        Float temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindDouble(4, temperature);
        }
 
        String healthstate = entity.getHealthstate();
        if (healthstate != null) {
            stmt.bindString(5, healthstate);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(6, createtime);
        }
 
        String fbody = entity.getFbody();
        if (fbody != null) {
            stmt.bindString(7, fbody);
        }
 
        String fext = entity.getFext();
        if (fext != null) {
            stmt.bindString(8, fext);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TimeRecordEntity readEntity(Cursor cursor, int offset) {
        TimeRecordEntity entity = new TimeRecordEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cardid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // machine
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // temperature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // healthstate
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fbody
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fext
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TimeRecordEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCardid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMachine(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setHealthstate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatetime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setFbody(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFext(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TimeRecordEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TimeRecordEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
